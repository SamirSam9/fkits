import asyncio
import logging
import sqlite3
import random
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from datetime import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters import Command
from dotenv import load_dotenv
import os

# --------- –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã ----------------
async def handle(request):
    return web.Response(text="Bot is running OK")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
# –ó–ê–ì–õ–£–®–ö–ò - –í–ê–ú –ù–£–ñ–ù–û –ë–£–î–ï–¢ –ó–ê–ú–ï–ù–ò–¢–¨:
API_TOKEN = os.getenv('API_TOKEN', '8322636763:AAHyqLDD-voqN6MjUD8XKV8v7Jc5FnENuv8')  # üî∏ –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', 'fkits.onrender.com')}{WEBHOOK_PATH}"  # üî∏ –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –î–û–ú–ï–ù
PORT = int(os.getenv("PORT", 10000))
CARD_NUMBER = os.getenv('CARD_NUMBER', '6262 4700 5534 4787')  # üî∏ –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ù–û–ú–ï–† –ö–ê–†–¢–´

# –ê–¥–º–∏–Ω—ã - –∑–∞–≥–ª—É—à–∫–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ Telegram ID)
ADMIN_IDS = [5009858379,587180281,1225271746]  

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ORDER_NEW = 'new'
ORDER_WAITING_CONFIRM = 'waiting_confirm'
ORDER_CONFIRMED = 'confirmed'
ORDER_CANCELLED = 'cancelled'
CUSTOMIZATION_PRICE = 50000  # 50,000 UZS –∑–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
DB_FILENAME = 'football_shop.db'

def setup_database():
    try:
        conn = sqlite3.connect(DB_FILENAME, check_same_thread=False)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                phone TEXT NOT NULL,
                name TEXT NOT NULL,
                language TEXT DEFAULT 'ru',
                region TEXT,
                post_office TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name_ru TEXT NOT NULL,
                name_uz TEXT NOT NULL,
                price INTEGER NOT NULL,
                category_ru TEXT NOT NULL,
                category_uz TEXT NOT NULL,
                image_url TEXT,
                description_ru TEXT,
                description_uz TEXT,
                sizes_ru TEXT,
                sizes_uz TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_name TEXT NOT NULL,
                review_text_ru TEXT NOT NULL,
                review_text_uz TEXT NOT NULL,
                photo_url TEXT,
                rating INTEGER DEFAULT 5,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                user_phone TEXT NOT NULL,
                user_name TEXT,
                user_region TEXT,
                user_post_office TEXT,
                product_name TEXT NOT NULL,
                product_price INTEGER NOT NULL,
                product_size TEXT,
                customization_text TEXT,
                customization_price INTEGER DEFAULT 0,
                payment_method TEXT DEFAULT 'card_pending',
                status TEXT DEFAULT 'new',
                receipt_photo_id TEXT,
                confirmed_by INTEGER,
                confirmed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("SELECT COUNT(*) FROM reviews")
        if cursor.fetchone()[0] == 0:
            test_reviews = [
                ('–ê–ª–∏—à–µ—Ä', '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –§–æ—Ä–º–∞ —Å–∏–¥–∏—Ç –∏–¥–µ–∞–ª—å–Ω–æ.', 'Ajoyib sifat! Forma aynan mos keldi.', '', 5),
                ('–ú–∞—Ä–∏—è', '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≤—Å—ë –ø—Ä–∏—à–ª–æ –≤ —Ü–µ–ª–æ—Å—Ç–∏.', 'Tez yetkazib berish, hammasi butun holda keldi.', '', 5),
                ('–°–µ—Ä–≥–µ–π', '–ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏ –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ!', 'Bosma sifatƒ± eng yuqori darajada!', '', 4),
            ]
            cursor.executemany(
                "INSERT INTO reviews (customer_name, review_text_ru, review_text_uz, photo_url, rating) VALUES (?, ?, ?, ?, ?)",
                test_reviews
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute("SELECT COUNT(*) FROM products")
        if cursor.fetchone()[0] == 0:
            test_products = [
                # –§–æ—Ä–º—ã –Ω—ã–Ω–µ—à–Ω–∏–π —Å–µ–∑–æ–Ω
                ('–§–æ—Ä–º–∞ –ü–∞—Ö—Ç–∞–∫–æ—Ä 2024', 'Paxtakor Formasi 2024', 180000, '–§–æ—Ä–º—ã 2024/2025', '2024/2025 Formalari', '', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –§–ö –ü–∞—Ö—Ç–∞–∫–æ—Ä —Å–µ–∑–æ–Ω 2024', 'Rasmiy Paxtakor FK formasi 2024', 'S, M, L, XL', 'S, M, L, XL'),
                ('–§–æ—Ä–º–∞ –ù–∞–≤–±–∞—Ö–æ—Ä 2024', 'Navbahor Formasi 2024', 170000, '–§–æ—Ä–º—ã 2024/2025', '2024/2025 Formalari', '', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –§–ö –ù–∞–≤–±–∞—Ö–æ—Ä', 'Rasmiy Navbahor FK formasi', 'S, M, L, XL', 'S, M, L, XL'),
                
                # –†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã
                ('–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º–∞ –ü–∞—Ö—Ç–∞–∫–æ—Ä 1990', 'Paxtakor Retro Formasi 1990', 150000, '–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã', 'Retro Formalari', '', '–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º–∞ –ü–∞—Ö—Ç–∞–∫–æ—Ä 90-—Ö –≥–æ–¥–æ–≤', '90-yillarning Paxtakor retro formasi', 'S, M, L, XL', 'S, M, L, XL'),
                ('–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º–∞ –ù–∞–≤–±–∞—Ö–æ—Ä 1995', 'Navbahor Retro Formasi 1995', 145000, '–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã', 'Retro Formalari', '', '–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º–∞ –ù–∞–≤–±–∞—Ö–æ—Ä 1995 –≥–æ–¥–∞', '1995-yil Navbahor retro formasi', 'S, M, L, XL', 'S, M, L, XL'),
                
                # –ë—É—Ç—Å—ã
                ('–ë—É—Ç—Å—ã Nike Mercurial', 'Nike Mercurial Futbolka', 220000, '–ë—É—Ç—Å—ã', 'Futbolkalar', '', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –±—É—Ç—Å—ã', 'Professional futbolkalar', '40, 41, 42, 43, 44', '40, 41, 42, 43, 44'),
                ('–ë—É—Ç—Å—ã Adidas Predator', 'Adidas Predator Futbolka', 240000, '–ë—É—Ç—Å—ã', 'Futbolkalar', '', '–ë—É—Ç—Å—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º—è—á–∞', 'Topni nazorat qilish uchun futbolkalar', '40, 41, 42, 43, 44', '40, 41, 42, 43, 44'),
                
                # –ê–∫—Ü–∏–∏
                ('–ù–∞–±–æ—Ä —Ñ–æ—Ä–º–∞+–≥–µ—Ç—Ä—ã', 'Forma+Gaitor to\'plam', 200000, '–ê–∫—Ü–∏–∏', 'Aksiyalar', '', '–§–æ—Ä–º–∞ + –≥–µ—Ç—Ä—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ', 'Forma + gaitor maxsus narxda', 'S, M, L', 'S, M, L'),
                
                # –§—É—Ç–±–æ–ª—å–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞
                ('–í—Ä–∞—Ç–∞—Ä—Å–∫–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏', 'Darvozabon qo\'lqoplari', 80000, '–§—É—Ç–±–æ–ª—å–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞', 'Futbol Aksessuarlari', '', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—Ä–∞—Ç–∞—Ä—Å–∫–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏', 'Professional darvozabon qo\'lqoplari', 'S, M, L', 'S, M, L'),
                ('–§—É—Ç–±–æ–ª—å–Ω—ã–π –º—è—á', 'Futbol to\'pi', 120000, '–§—É—Ç–±–æ–ª—å–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞', 'Futbol Aksessuarlari', '', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç—á–µ–≤—ã–π –º—è—á', 'Rasmiy match to\'pi', '–†–∞–∑–º–µ—Ä 5', '5-hajm'),
                ('–ì–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ', 'Professional gaitorlar', 25000, '–§—É—Ç–±–æ–ª—å–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞', 'Futbol Aksessuarlari', '', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –≥–µ—Ç—Ä—ã', 'Professional futbol gaitorlari', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', 'Universal'),
            ]
            cursor.executemany(
                "INSERT INTO products (name_ru, name_uz, price, category_ru, category_uz, image_url, description_ru, description_uz, sizes_ru, sizes_uz) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                test_products
            )

        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# ================== –†–ï–ì–ò–û–ù–´ –ò –ü–û–ß–¢–û–í–´–ï –û–¢–î–ï–õ–ï–ù–ò–Ø ==================
POST_OFFICES = {
    'tashkent': {
        'ru': [
            "üìç –¢–∞—à–∫–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\nüìû –ù–∞—à –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
        ],
        'uz': [
            "üìç Toshkent - joylashuvingizni yuboring\nüìû Bizning kuryerimiz manzilni aniqlash uchun siz bilan bog'lanadi",
        ]
    },
    'andijan': {
        'ru': [
            "üìÆ –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–æ–µ –û–ü–° ‚Ññ12\nüó∫Ô∏è –Ø–Ω–¥–µ–∫—Å: https://yandex.uz/maps/?text=Uzbekistan, Andijan, S.Ayni Street, 1",
            "üìÆ –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–æ–µ –û–ü–° ‚Ññ4\nüó∫Ô∏è –Ø–Ω–¥–µ–∫—Å: https://yandex.uz/maps/?text=Uzbekistan, Andijan, Bobur Street, 10",
            "üìÆ –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–æ–µ –û–ü–° ‚Ññ6\nüó∫Ô∏è –Ø–Ω–¥–µ–∫—Å: https://yandex.uz/maps/?text=Uzbekistan, Andijan, Navoi Avenue, 15",
        ],
        'uz': [
            "üìÆ Andijon O–ü–• ‚Ññ12\nüó∫Ô∏è Yandex: https://yandex.uz/maps/?text=Uzbekistan, Andijan, S.Ayni Street, 1",
            "üìÆ Andijon O–ü–• ‚Ññ4\nüó∫Ô∏è Yandex: https://yandex.uz/maps/?text=Uzbekistan, Andijan, Bobur Street, 10",
            "üìÆ Andijon O–ü–• ‚Ññ6\nüó∫Ô∏è Yandex: https://yandex.uz/maps/?text=Uzbekistan, Andijan, Navoi Avenue, 15",
        ]
    },
    'bukhara': {
        'ru': [
            "üìÆ –ë—É—Ö–∞—Ä—Å–∫–æ–µ –û–ü–° ‚Ññ5\nüó∫Ô∏è –Ø–Ω–¥–µ–∫—Å: https://yandex.uz/maps/?text=Uzbekistan, Bukhara, B.Naqshband Street, 25",
        ],
        'uz': [
            "üìÆ Buxoro O–ü–• ‚Ññ5\nüó∫Ô∏è Yandex: https://yandex.uz/maps/?text=Uzbekistan, Bukhara, B.Naqshband Street, 25",
        ]
    },
    # ... –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
}

REGIONS = {
    'ru': {
        'tashkent': 'üìç –¢–∞—à–∫–µ–Ω—Ç (–≥–æ—Ä–æ–¥)',
        'andijan': 'üèôÔ∏è –ê–Ω–¥–∏–∂–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'bukhara': 'üèôÔ∏è –ë—É—Ö–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'fergana': 'üèôÔ∏è –§–µ—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'jizzakh': 'üèôÔ∏è –î–∂–∏–∑–∞–∫—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'khorezm': 'üèôÔ∏è –•–æ—Ä–µ–∑–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'namangan': 'üèôÔ∏è –ù–∞–º–∞–Ω–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'navoi': 'üèôÔ∏è –ù–∞–≤–æ–∏–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'kashkadarya': 'üèôÔ∏è –ö–∞—à–∫–∞–¥–∞—Ä—å–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'samarkand': 'üèôÔ∏è –°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'sirdarya': 'üèôÔ∏è –°—ã—Ä–¥–∞—Ä—å–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'surkhandarya': 'üèôÔ∏è –°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'tashkent_region': 'üèôÔ∏è –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'karakalpakstan': 'üèôÔ∏è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω'
    },
    'uz': {
        'tashkent': 'üìç Toshkent (shahar)',
        'andijan': 'üèôÔ∏è Andijon viloyati',
        'bukhara': 'üèôÔ∏è Buxoro viloyati',
        'fergana': 'üèôÔ∏è Farg ªona viloyati',
        'jizzakh': 'üèôÔ∏è Jizzax viloyati',
        'khorezm': 'üèôÔ∏è Xorazm viloyati',
        'namangan': 'üèôÔ∏è Namangan viloyati',
        'navoi': 'üèôÔ∏è Navoiy viloyati',
        'kashkadarya': 'üèôÔ∏è Qashqadaryo viloyati',
        'samarkand': 'üèôÔ∏è Samarqand viloyati',
        'sirdarya': 'üèôÔ∏è Sirdaryo viloyati',
        'surkhandarya': 'üèôÔ∏è Surxondaryo viloyati',
        'tashkent_region': 'üèôÔ∏è Toshkent viloyati',
        'karakalpakstan': 'üèôÔ∏è Qoraqalpog ªiston Respublikasi'
    }
}

# ================== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò ==================
user_sessions = {}
user_selections = {}
user_carts = {}
support_requests = {}
admin_sessions = {}

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def get_language_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"))
    builder.add(KeyboardButton(text="üá∫üáø O'zbekcha"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_contact_keyboard(language):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if language == 'ru' else "üìû Kontaktni yuborish", request_contact=True)],
            [KeyboardButton(text="üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é" if language == 'ru' else "üì± Raqamni qo'lda kiritish")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_manual_phone_keyboard(language):
    text = "üîô –ù–∞–∑–∞–¥" if language == 'ru' else "üîô Orqaga"
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=text)]],
        resize_keyboard=True
    )

def get_region_keyboard(language):
    builder = ReplyKeyboardBuilder()
    regions = REGIONS[language]
    for region_key in regions:
        builder.add(KeyboardButton(text=regions[region_key]))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_post_office_keyboard(region, language):
    builder = ReplyKeyboardBuilder()
    if region in POST_OFFICES:
        offices = POST_OFFICES[region][language]
        for office in offices:
            office_name = office.split('\n')[0]
            builder.add(KeyboardButton(text=office_name))
    builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥" if language == 'ru' else "‚Ü©Ô∏è Orqaga"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_location_keyboard(language):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" if language == 'ru' else "üìç Geolokatsiyani yuborish", request_location=True)],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥" if language == 'ru' else "‚Ü©Ô∏è Orqaga")]
        ],
        resize_keyboard=True
    )

def get_main_menu(language):
    builder = ReplyKeyboardBuilder()
    if language == 'ru':
        builder.add(KeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"))
        builder.add(KeyboardButton(text="‚≠ê –ú–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"))
        builder.add(KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
        builder.add(KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    else:
        builder.add(KeyboardButton(text="üõçÔ∏è Katalog"))
        builder.add(KeyboardButton(text="‚≠ê Mijozlar fikri"))
        builder.add(KeyboardButton(text="üõí Savat"))
        builder.add(KeyboardButton(text="üì¶ Mening buyurtmalarim"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è Yordam"))
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

def get_catalog_keyboard(language):
    builder = ReplyKeyboardBuilder()
    if language == 'ru':
        builder.add(KeyboardButton(text="üëï –§–æ—Ä–º—ã 2024/2025"))
        builder.add(KeyboardButton(text="üï∞Ô∏è –†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã"))
        builder.add(KeyboardButton(text="‚öΩ –ë—É—Ç—Å—ã"))
        builder.add(KeyboardButton(text="üéÅ –§—É—Ç. –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞"))
        builder.add(KeyboardButton(text="üî• –ê–∫—Ü–∏–∏"))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    else:
        builder.add(KeyboardButton(text="üëï 2024/2025 Formalari"))
        builder.add(KeyboardButton(text="üï∞Ô∏è Retro formalar"))
        builder.add(KeyboardButton(text="‚öΩ Futbolkalar"))
        builder.add(KeyboardButton(text="üéÅ Futbol Aksessuarlari"))
        builder.add(KeyboardButton(text="üî• Aksiyalar"))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è Orqaga"))
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup(resize_keyboard=True)

def get_customization_keyboard(language):
    builder = ReplyKeyboardBuilder()
    if language == 'ru':
        builder.add(KeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –∏ –Ω–æ–º–µ—Ä"))
        builder.add(KeyboardButton(text="‚ùå –ù–µ—Ç, –±–µ–∑ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"))
        builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º"))
    else:
        builder.add(KeyboardButton(text="‚úÖ Ha, ism va raqam qo'shing"))
        builder.add(KeyboardButton(text="‚ùå Yo'q, be'zashsiz"))
        builder.add(KeyboardButton(text="üîô Mahsulotlarga qaytish"))
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

def get_size_keyboard(language, product_category):
    builder = InlineKeyboardBuilder()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if any(word in product_category.lower() for word in ['—Ñ–æ—Ä–º–∞', 'formasi', '–∞–∫—Å–µ—Å—Å—É–∞—Ä', 'aksessuar']):
        sizes = [("S", "size_S"), ("M", "size_M"), ("L", "size_L"), ("XL", "size_XL"), ("XXL", "size_XXL")]
    else:  # –ë—É—Ç—Å—ã
        sizes = [("40", "size_40"), ("41", "size_41"), ("42", "size_42"), ("43", "size_43"), ("44", "size_44")]
    
    for size, callback_data in sizes:
        builder.add(types.InlineKeyboardButton(text=size, callback_data=callback_data))
    
    help_text = "üìè –ü–æ–º–æ—â—å" if language == 'ru' else "üìè Yordam"
    builder.add(types.InlineKeyboardButton(text=help_text, callback_data="size_help"))
    builder.adjust(3, 3, 1)
    return builder.as_markup()

def get_cart_keyboard(language):
    builder = ReplyKeyboardBuilder()
    if language == 'ru':
        builder.add(KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
        builder.add(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä"))
        builder.add(KeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
        builder.add(KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"))
        builder.add(KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    else:
        builder.add(KeyboardButton(text="üõí Savat"))
        builder.add(KeyboardButton(text="‚ûï Yana mahsulot qo'shish"))
        builder.add(KeyboardButton(text="üí≥ Buyurtma berish"))
        builder.add(KeyboardButton(text="üóëÔ∏è Savatni tozalash"))
        builder.add(KeyboardButton(text="üîô Asosiy menyu"))
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

def get_payment_menu(language):
    builder = ReplyKeyboardBuilder()
    if language == 'ru':
        builder.add(KeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"))
        builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    else:
        builder.add(KeyboardButton(text="üí≥ Karta orqali to'lash"))
        builder.add(KeyboardButton(text="‚ùå Bekor qilish"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_reviews_menu(language):
    builder = ReplyKeyboardBuilder()
    if language == 'ru':
        builder.add(KeyboardButton(text="‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"))
        builder.add(KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    else:
        builder.add(KeyboardButton(text="‚≠ê Sharhlarni ko'rish"))
        builder.add(KeyboardButton(text="‚úçÔ∏è Sharh qoldirish"))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è Orqaga"))
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

def get_back_menu(language):
    text = "‚Ü©Ô∏è –ù–∞–∑–∞–¥" if language == 'ru' else "‚Ü©Ô∏è Orqaga"
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=text)]], resize_keyboard=True)

# ================== –ê–î–ú–ò–ù –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def get_admin_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.add(KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã"))
    builder.add(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    builder.add(KeyboardButton(text="üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"))
    builder.add(KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã"))
    builder.add(KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"))
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup(resize_keyboard=True)

def get_orders_menu():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîÑ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_orders_pending"))
    builder.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="admin_orders_confirmed"))
    builder.add(types.InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_all"))
    builder.adjust(1)
    return builder.as_markup()

def get_order_actions(order_id):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"))
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}"))
    builder.add(types.InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{order_id}"))
    builder.adjust(2, 1)
    return builder.as_markup()

def get_categories_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üëï –§–æ—Ä–º—ã 2024/2025"))
    builder.add(KeyboardButton(text="üï∞Ô∏è –†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã"))
    builder.add(KeyboardButton(text="‚öΩ –ë—É—Ç—Å—ã"))
    builder.add(KeyboardButton(text="üéÅ –§—É—Ç. –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞"))
    builder.add(KeyboardButton(text="üî• –ê–∫—Ü–∏–∏"))
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup(resize_keyboard=True)

def get_products_management_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="admin_products_view"))
    builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_products_delete"))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_products_back"))
    builder.adjust(1)
    return builder.as_markup()

def get_products_list_keyboard(products, action):
    builder = InlineKeyboardBuilder()
    for product in products:
        product_id, name_ru, name_uz, price = product
        builder.add(types.InlineKeyboardButton(
            text=f"{product_id}. {name_ru} - {format_price(price, 'ru')}",
            callback_data=f"{action}_{product_id}"
        ))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_products_back"))
    builder.adjust(1)
    return builder.as_markup()

# ================== –¢–ï–ö–°–¢–´ ==================
def get_text(key, language):
    texts = {
        'welcome': {
            'ru': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FootballKits.uz!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            'uz': "üëã FootballKits.uz ga xush kelibsiz!\n\nTilni tanlang:"
        },
        'welcome_back': {
            'ru': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ FootballKits.uz!",
            'uz': "üëã FootballKits.uz ga yana xush kelibsiz!"
        },
        'contact_request': {
            'ru': "üìû –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é:",
            'uz': "üìû Davom etish uchun kontaktni ulashing yoki raqamni qo'lda kiriting:"
        },
        'manual_phone_request': {
            'ru': "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+998901234567\n\n‚ö†Ô∏è –ù–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –ø—Ä–∏–¥—ë—Ç SMS –æ—Ç –ø–æ—á—Ç—ã —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º!",
            'uz': "üì± Telefon raqamingizni quyidagi formatda kiriting:\n+998901234567\n\n‚ö†Ô∏è Ushbu raqamga pochta orqali trek raqami bilan SMS keladi!"
        },
        'region_request': {
            'ru': "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
            'uz': "üèôÔ∏è Yetkazib berish uchun viloyatingizni tanlang:"
        },
        'post_office_request': {
            'ru': "üìÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:",
            'uz': "üìÆ Pochta bo'limini tanlang:"
        },
        'contact_received': {
            'ru': "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!",
            'uz': "‚úÖ Kontakt qabul qilindi!"
        },
        'phone_received': {
            'ru': "‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!",
            'uz': "‚úÖ Raqam qabul qilindi!"
        },
        'post_office_received': {
            'ru': "‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã:",
            'uz': "‚úÖ Bo ªlim tanlandi! Endi mahsulotlarni tanlashingiz mumkin:"
        },
        'help_text': {
            'ru': "ü§ù –ü–æ–º–æ—â—å\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 88 111-10-81\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 97 455-55-82\nüìç –ê–¥—Ä–µ—Å: –¢–∞—à–∫–µ–Ω—Ç, –º. –ù–æ–≤–∑–∞\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-23:00\n\nüí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            'uz': "ü§ù Yordam\n\nüìû Telefon: +998 88 111-10-81\nüìû Telefon: +998 97 455-55-82\nüìç Manzil: Toshkent, Novza metrosi\n‚è∞ Ish vaqti: 9:00-23:00\n\nüí¨ Savolingizni bering:"
        },
        'choose_size': {
            'ru': "üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            'uz': "üìè O ªlchamni tanlang:"
        },
        'size_selected': {
            'ru': "‚úÖ –†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω: ",
            'uz': "‚úÖ O ªlcham tanlandi: "
        },
        'order_cancelled': {
            'ru': "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
            'uz': "‚ùå Buyurtma bekor qilindi"
        }
    }
    return texts.get(key, {}).get(language, key)

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• –§–£–ù–ö–¶–ò–ò ==================
def get_db_connection():
    return sqlite3.connect(DB_FILENAME, check_same_thread=False)

def save_user(user_id, phone, name, language, region=None, post_office=None):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, phone, name, language, region, post_office) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, phone, name, language, region, post_office)
        )
        conn.commit()

def get_user(user_id):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT phone, name, language, region, post_office FROM users WHERE user_id = ?", (user_id,))
            return cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def get_products_by_category(category, language):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        if language == 'ru':
            cursor.execute("SELECT id, name_ru, price, image_url, description_ru, sizes_ru FROM products WHERE category_ru = ?", (category,))
        else:
            cursor.execute("SELECT id, name_uz, price, image_url, description_uz, sizes_uz FROM products WHERE category_uz = ?", (category,))
        return cursor.fetchall()

def get_product_by_id(product_id, language):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        if language == 'ru':
            cursor.execute("SELECT name_ru, price, image_url, description_ru, sizes_ru FROM products WHERE id = ?", (product_id,))
        else:
            cursor.execute("SELECT name_uz, price, image_url, description_uz, sizes_uz FROM products WHERE id = ?", (product_id,))
        return cursor.fetchone()

def save_order(user_id, phone, name, region, post_office, product_name, product_price, product_size=None, customization_text=None, customization_price=0, payment_method='card_pending'):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """INSERT INTO orders (user_id, user_phone, user_name, user_region, user_post_office, product_name, product_price, product_size, customization_text, customization_price, payment_method)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (user_id, phone, name, region, post_office, product_name, product_price, product_size, customization_text, customization_price, payment_method)
        )
        order_id = cursor.lastrowid
        conn.commit()
        return order_id

def get_user_orders(user_id, language):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """SELECT product_name, product_price, customization_price, status, payment_method, created_at
            FROM orders WHERE user_id = ? ORDER BY created_at DESC LIMIT 5""",
            (user_id,)
        )
        return cursor.fetchall()

def get_all_orders(status=None):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        if status:
            cursor.execute(
                """SELECT id, user_id, user_name, user_phone, user_region, user_post_office, product_name,
                product_price, product_size, customization_text, customization_price, status, created_at
                FROM orders WHERE status = ? ORDER BY created_at DESC""",
                (status,)
            )
        else:
            cursor.execute(
                """SELECT id, user_id, user_name, user_phone, user_region, user_post_office, product_name,
                product_price, product_size, customization_text, customization_price, status, created_at
                FROM orders ORDER BY created_at DESC LIMIT 50"""
            )
        return cursor.fetchall()

def update_order_status(order_id, status, admin_id=None):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        if admin_id:
            cursor.execute("UPDATE orders SET status = ?, confirmed_by = ?, confirmed_at = CURRENT_TIMESTAMP WHERE id = ?",
                          (status, admin_id, order_id))
        else:
            cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))
        conn.commit()

def get_order_by_id(order_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """SELECT id, user_id, user_name, user_phone, user_region, user_post_office, product_name,
            product_price, product_size, customization_text, customization_price, status, receipt_photo_id
            FROM orders WHERE id = ?""",
            (order_id,)
        )
        return cursor.fetchone()

def get_statistics():
    with get_db_connection() as conn:
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM orders")
        total_orders = cursor.fetchone()[0]

        cursor.execute("SELECT status, COUNT(*) FROM orders GROUP BY status")
        status_stats = cursor.fetchall()

        cursor.execute("SELECT SUM(product_price + customization_price) FROM orders WHERE status = 'confirmed'")
        total_revenue = cursor.fetchone()[0] or 0

        return {
            'total_users': total_users,
            'total_orders': total_orders,
            'status_stats': dict(status_stats),
            'total_revenue': total_revenue
        }

def add_product(name_ru, name_uz, price, category_ru, category_uz, description_ru, description_uz, sizes_ru, sizes_uz, image_url=None):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """INSERT INTO products (name_ru, name_uz, price, category_ru, category_uz, image_url, description_ru, description_uz, sizes_ru, sizes_uz)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (name_ru, name_uz, price, category_ru, category_uz, image_url, description_ru, description_uz, sizes_ru, sizes_uz)
        )
        product_id = cursor.lastrowid
        conn.commit()
        return product_id

def get_all_products():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name_ru, name_uz, price FROM products ORDER BY id DESC LIMIT 20")
        return cursor.fetchall()

def delete_product(product_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        return cursor.rowcount > 0

def get_all_reviews():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT customer_name, review_text_ru, review_text_uz, photo_url, rating, created_at FROM reviews ORDER BY created_at DESC LIMIT 10")
        return cursor.fetchall()

def format_price(price, language):
    try:
        formatted = f"{int(price):,} UZS".replace(',', ' ')
    except:
        formatted = f"{price} UZS"
    return formatted

# ================== –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–û–í ==================
async def send_product_card(chat_id, product, language):
    product_id, name, price, image_url, description, sizes = product

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    lower_name = (name or "").lower()
    if any(word in lower_name for word in ['—Ñ–æ—Ä–º–∞', 'formasi']):
        emoji = "üëï"
    elif any(word in lower_name for word in ['–±—É—Ç—Å—ã', 'futbolka']):
        emoji = "‚öΩ"
    elif any(word in lower_name for word in ['–ø–µ—Ä—á–∞—Ç–∫–∏', '–º—è—á', '–≥–µ—Ç—Ä—ã', 'qo\'lqop', 'to\'p', 'gaitor']):
        emoji = "üéÅ"
    else:
        emoji = "üî•"

    if language == 'ru':
        caption = (
            f"{emoji} <b>{name}</b>\n\n"
            f"üìù {description}\n\n"
            f"üìè <b>–†–∞–∑–º–µ—Ä—ã: {sizes}</b>\n\n"
            f"üíµ <b>–¶–µ–Ω–∞: {format_price(price, language)}</b>\n\n"
            f"üÜî <code>ID: {product_id}</code>\n\n"
            f"‚ú® <i>–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞</i>"
        )
    else:
        caption = (
            f"{emoji} <b>{name}</b>\n\n"
            f"üìù {description}\n\n"
            f"üìè <b>O ªlchamlar: {sizes}</b>\n\n"
            f"üíµ <b>Narx: {format_price(price, language)}</b>\n\n"
            f"üÜî <code>ID: {product_id}</code>\n\n"
            f"‚ú® <i>Buyurtma berish uchun mahsulot raqamini yozing</i>"
        )

    try:
        if image_url:
            await bot.send_photo(
                chat_id=chat_id,
                photo=image_url,
                caption=caption,
                parse_mode='HTML',
                reply_markup=get_back_menu(language)
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=caption,
                parse_mode='HTML',
                reply_markup=get_back_menu(language)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text=caption,
            parse_mode='HTML',
            reply_markup=get_back_menu(language)
        )

# ================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú ==================
async def notify_admins(text, photo_id=None):
    for admin_id in ADMIN_IDS:
        try:
            if photo_id:
                await bot.send_photo(admin_id, photo_id, caption=text)
            else:
                await bot.send_message(admin_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# ================== –ö–û–†–ó–ò–ù–ê ==================
async def show_cart(user_id, language, message):
    cart = user_carts.get(user_id, [])

    if not cart:
        if language == 'ru':
            await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=get_main_menu(language))
        else:
            await message.answer("üõí Savat bo'sh", reply_markup=get_main_menu(language))
        return

    total_price = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" if language == 'ru' else "üõí Sizning savatingiz:\n\n"

    for i, item in enumerate(cart, 1):
        item_price = item['product_price'] + (item.get('customization', {}).get('price', 0) if item.get('customization') else 0)
        total_price += item_price

        cart_text += f"{i}. {item['product_name']}\n"
        if item.get('size'):
            cart_text += f"   üìè –†–∞–∑–º–µ—Ä: {item['size']}\n" if language == 'ru' else f"   üìè O ªlcham: {item['size']}\n"
        if item.get('customization'):
            cart_text += f"   ‚ú® –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è: {item['customization']['text']}\n" if language == 'ru' else f"   ‚ú® Be'zash: {item['customization']['text']}\n"
        cart_text += f"   üíµ {format_price(item_price, language)}\n\n"

    cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {format_price(total_price, language)}" if language == 'ru' else f"üí∞ Jami: {format_price(total_price, language)}"

    await message.answer(cart_text, reply_markup=get_cart_keyboard(language))

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def start_bot(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        language = user[2]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if user_id in ADMIN_IDS:
            await admin_panel(message)
        else:
            text = get_text('welcome_back', language)
            await message.answer(text, reply_markup=get_main_menu(language))
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        user_sessions[user_id] = {'step': 'language'}
        await message.answer(get_text('welcome', 'ru'), 
                           reply_markup=get_language_keyboard())

# –í–´–ë–û–† –Ø–ó–´–ö–ê
@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"]))
async def handle_language(message: types.Message):
    user_id = message.from_user.id
    language = 'ru' if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else 'uz'

    user_sessions[user_id] = {'step': 'contact', 'language': language}
    await message.answer(get_text('contact_request', language), reply_markup=get_contact_keyboard(language))

# –†–£–ß–ù–û–ô –í–í–û–î –ù–û–ú–ï–†–ê
@dp.message(F.text.in_(["üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é", "üì± Raqamni qo'lda kiritish"]))
async def handle_manual_phone_request(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if session.get('step') != 'contact':
        return

    language = session.get('language', 'ru')
    user_sessions[user_id]['step'] = 'manual_phone'

    await message.answer(get_text('manual_phone_request', language), reply_markup=get_manual_phone_keyboard(language))

# –û–ë–†–ê–ë–û–¢–ö–ê –†–£–ß–ù–û–ì–û –í–í–û–î–ê –ù–û–ú–ï–†–ê
@dp.message(F.text.regexp(r'^\+.*'))
async def handle_manual_phone_input(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if session.get('step') != 'manual_phone':
        return

    language = session.get('language', 'ru')
    phone = message.text.strip()

    if not phone.startswith('+998') or len(phone) != 13 or not phone[1:].isdigit():
        if language == 'ru':
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998901234567")
        else:
            await message.answer("‚ùå Noto'g'ri raqam formati. Formatda kiriting: +998901234567")
        return

    user_sessions[user_id]['step'] = 'region'
    user_sessions[user_id]['phone'] = phone
    user_sessions[user_id]['name'] = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    await message.answer(get_text('phone_received', language))
    await message.answer(get_text('region_request', language), reply_markup=get_region_keyboard(language))

# –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê
@dp.message(F.contact)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if session.get('step') != 'contact':
        return

    language = session.get('language', 'ru')
    phone = message.contact.phone_number
    name = message.contact.first_name or message.from_user.first_name

    save_user(user_id, phone, name, language)
    user_sessions[user_id]['step'] = 'region'
    user_sessions[user_id]['phone'] = phone
    user_sessions[user_id]['name'] = name

    await message.answer(get_text('contact_received', language))
    await message.answer(get_text('region_request', language), reply_markup=get_region_keyboard(language))

# –í–´–ë–û–† –†–ï–ì–ò–û–ù–ê –ò –ü–û–ß–¢–û–í–û–ì–û –û–¢–î–ï–õ–ï–ù–ò–Ø
@dp.message(F.text)
async def handle_text_messages(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω
    if session.get('step') == 'region':
        language = session.get('language', 'ru')
        text = message.text

        selected_region = None
        for region_key, region_name in REGIONS[language].items():
            if text == region_name:
                selected_region = region_key
                break

        if not selected_region:
            if language == 'ru':
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
            else:
                await message.answer("‚ùå Iltimos, ro'yxatdan viloyatni tanlang")
            return

        user_sessions[user_id]['step'] = 'post_office'
        user_sessions[user_id]['region'] = selected_region

        if selected_region == 'tashkent':
            # –î–ª—è –¢–∞—à–∫–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            if language == 'ru':
                await message.answer("üìç –¢–∞—à–∫–µ–Ω—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\nüìû –ù–∞—à –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
                                   reply_markup=get_location_keyboard(language))
            else:
                await message.answer("üìç Toshkent - joylashuvingizni yuboring\nüìû Bizning kuryerimiz manzilni aniqlash uchun siz bilan bog'lanadi",
                                   reply_markup=get_location_keyboard(language))
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
            if selected_region in POST_OFFICES:
                offices = POST_OFFICES[selected_region][language]
                for office in offices:
                    await message.answer(office)

                await message.answer(get_text('post_office_request', language),
                                   reply_markup=get_post_office_keyboard(selected_region, language))
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
    if session.get('step') == 'post_office':
        language = session.get('language', 'ru')
        region = session.get('region')
        text = message.text

        if text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "‚Ü©Ô∏è Orqaga"]:
            user_sessions[user_id]['step'] = 'region'
            await message.answer(get_text('region_request', language), reply_markup=get_region_keyboard(language))
            return

        save_user(user_id, session['phone'], session['name'], language, region, text)
        user_sessions[user_id]['step'] = 'main_menu'
        user_sessions[user_id]['post_office'] = text

        await message.answer(get_text('post_office_received', language),
                           reply_markup=get_main_menu(language))
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ handle_main_menu
    await handle_main_menu(message)

# –û–ë–†–ê–ë–û–¢–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò –î–õ–Ø –¢–ê–®–ö–ï–ù–¢–ê
@dp.message(F.location)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if session.get('step') == 'post_office' and session.get('region') == 'tashkent':
        language = session.get('language', 'ru')
        
        # üî• –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–û–†–î–ò–ù–ê–¢–´ –î–õ–Ø –ê–î–ú–ò–ù–ê
        location_text = f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {message.location.latitude}, {message.location.longitude}"
        
        save_user(user_id, session['phone'], session['name'], language, 'tashkent', location_text)
        user_sessions[user_id]['step'] = 'main_menu'
        user_sessions[user_id]['post_office'] = location_text
        user_sessions[user_id]['coordinates'] = (message.location.latitude, message.location.longitude)  # üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

        if language == 'ru':
            await message.answer("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.",
                               reply_markup=get_main_menu(language))
        else:
            await message.answer("‚úÖ Geolokatsiya qabul qilindi! Kuryer manzilni aniqlash uchun siz bilan bog'lanadi.",
                               reply_markup=get_main_menu(language))
# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ==================
async def handle_main_menu(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user
    text = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text in ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõçÔ∏è Katalog"]:
        await show_catalog(message)
    elif text in ["‚≠ê –ú–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", "‚≠ê Mijozlar fikri"]:
        await show_reviews_menu(message)
    elif text in ["üõí –ö–æ—Ä–∑–∏–Ω–∞", "üõí Savat"]:
        await show_cart_command(message)
    elif text in ["üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üì¶ Mening buyurtmalarim"]:
        await show_my_orders(message)
    elif text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è Yordam"]:
        await show_help(message)
    elif text in ["üëï –§–æ—Ä–º—ã 2024/2025", "üëï 2024/2025 Formalari"]:
        await show_category_products(message, "–§–æ—Ä–º—ã 2024/2025", "2024/2025 Formalari")
    elif text in ["üï∞Ô∏è –†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã", "üï∞Ô∏è Retro formalar"]:
        await show_category_products(message, "–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã", "Retro Formalari")
    elif text in ["‚öΩ –ë—É—Ç—Å—ã", "‚öΩ Futbolkalar"]:
        await show_category_products(message, "–ë—É—Ç—Å—ã", "Futbolkalar")
    elif text in ["üéÅ –§—É—Ç. –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞", "üéÅ Futbol Aksessuarlari"]:
        await show_category_products(message, "–§—É—Ç–±–æ–ª—å–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞", "Futbol Aksessuarlari")
    elif text in ["üî• –ê–∫—Ü–∏–∏", "üî• Aksiyalar"]:
        await show_category_products(message, "–ê–∫—Ü–∏–∏", "Aksiyalar")
    elif text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "‚Ü©Ô∏è Orqaga"]:
        await back_to_main_menu(message)
    elif text in ["‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå Bekor qilish"]:
        await handle_cancel(message)
    elif text in ["‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", "‚≠ê Sharhlarni ko'rish"]:
        await show_reviews(message)
    elif text in ["‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚úçÔ∏è Sharh qoldirish"]:
        await start_review(message)
    elif text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", "‚ûï Yana mahsulot qo'shish"]:
        await add_more_products(message)
    elif text in ["üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üí≥ Buyurtma berish"]:
        await checkout_cart(message)
    elif text in ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "üóëÔ∏è Savatni tozalash"]:
        await clear_cart(message)
    elif text in ["üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", "üí≥ Karta orqali to'lash"]:
        await handle_payment(message)
    elif text in ["‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –∏ –Ω–æ–º–µ—Ä", "‚úÖ Ha, ism va raqam qo'shing"]:
        await handle_customization_choice(message, True)
    elif text in ["‚ùå –ù–µ—Ç, –±–µ–∑ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏", "‚ùå Yo'q, be'zashsiz"]:
        await handle_customization_choice(message, False)
    elif text in ["üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", "üîô Mahsulotlarga qaytish"]:
        await back_to_catalog(message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞
        if text and text.isdigit():
            await handle_product_selection(message)
        elif user_id in support_requests and support_requests[user_id].get('waiting_question'):
            question = message.text
            admin_text = f"‚ùì –í–û–ü–†–û–° –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\nüë§ {name} (@{message.from_user.username or 'N/A'})\nüìû {phone}\nüí¨ {question}"
            await notify_admins(admin_text)

            if language == 'ru':
                await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=get_main_menu(language))
            else:
                await message.answer("‚úÖ Savolingiz yuborildi! Tez orada sizga javob beramiz.", reply_markup=get_main_menu(language))

            support_requests[user_id]['waiting_question'] = False
        elif user_id in user_sessions and user_sessions[user_id].get('waiting_review'):
            review_text = message.text
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO reviews (customer_name, review_text_ru, review_text_uz, rating)
                    VALUES (?, ?, ?, ?)
                """, (name, review_text, review_text, 5))
                conn.commit()

            admin_text = f"üìù –ù–û–í–´–ô –û–¢–ó–´–í\n\nüë§ {name} (@{message.from_user.username or 'N/A'})\nüìû {phone}\nüí¨ {review_text}"
            await notify_admins(admin_text)

            if language == 'ru':
                await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!", reply_markup=get_main_menu(language))
            else:
                await message.answer("‚úÖ Sharhingiz uchun rahmat! Biz sizning fikringizni qadrlaymiz!", reply_markup=get_main_menu(language))

            user_sessions[user_id]['waiting_review'] = False
        elif user_id in user_sessions and user_sessions[user_id].get('waiting_customization_text'):
            await handle_customization_text(message)
        else:
            await message.answer("‚ùå –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é." if language == 'ru' else "‚ùå Buyruqni tushunmayman. Menyu tugmalaridan foydalaning.",
                               reply_markup=get_main_menu(language))

# ================== –§–£–ù–ö–¶–ò–ò –ú–ê–ì–ê–ó–ò–ù–ê ==================
async def show_catalog(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user

    if language == 'ru':
        text = "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    else:
        text = "üõçÔ∏è Toifani tanlang:"

    await message.answer(text, reply_markup=get_catalog_keyboard(language))

async def show_category_products(message: types.Message, category_ru: str, category_uz: str):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user

    products = get_products_by_category(category_ru, language)

    if products:
        category_name = category_ru if language == 'ru' else category_uz
        if language == 'ru':
            await message.answer(f"üè∑Ô∏è {category_name}:\n\nüëá –í–æ—Ç –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:")
        else:
            await message.answer(f"üè∑Ô∏è {category_name}:\n\nüëá Bizning mahsulotlarimiz:")

        for product in products:
            await send_product_card(message.chat.id, product, language)
    else:
        if language == 'ru':
            await message.answer(f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_ru}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=get_main_menu(language))
        else:
            await message.answer(f"üòî '{category_uz}' toifasida hozircha mahsulotlar yo'q", reply_markup=get_main_menu(language))

# –í–´–ë–û–† –¢–û–í–ê–†–ê (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
@dp.message(F.text.regexp(r'^\d+$'))
async def handle_product_selection(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user

    try:
        product_id = int(message.text)
        product = get_product_by_id(product_id, language)

        if product:
            product_name, product_price, image_url, description, sizes = product

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä —Ñ–æ—Ä–º–æ–π (–¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏)
            if any(word in (product_name or "").lower() for word in ['—Ñ–æ—Ä–º–∞', 'formasi']):
                user_selections[message.from_user.id] = {
                    'product_id': product_id,
                    'product_name': product_name,
                    'product_price': product_price,
                    'image_url': image_url,
                    'category': '–§–æ—Ä–º—ã'
                }
                await ask_customization(message, language, product_name, product_price)
            else:
                user_selections[message.from_user.id] = {
                    'product_id': product_id,
                    'product_name': product_name,
                    'product_price': product_price,
                    'image_url': image_url,
                    'category': '–î—Ä—É–≥–æ–µ'
                }
                if language == 'ru':
                    text = f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\nüì¶ {product_name}\nüíµ {format_price(product_price, language)}\n\n{get_text('choose_size', language)}"
                else:
                    text = f"üõí Siz tanladingiz:\n\nüì¶ {product_name}\nüíµ {format_price(product_price, language)}\n\n{get_text('choose_size', language)}"
                await message.answer(text, reply_markup=get_size_keyboard(language, '–î—Ä—É–≥–æ–µ'))
        else:
            if language == 'ru':
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await message.answer("‚ùå Mahsulot topilmadi")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        if language == 'ru':
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞")
        else:
            await message.answer("‚ùå Mahsulotni tanlashda xato")

# –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–Ø
async def ask_customization(message: types.Message, language: str, product_name: str, product_price: int):
    if language == 'ru':
        text = (
            f"üé® <b>–î–æ–±–∞–≤–∏—Ç—å –∏–º—è –∏ –Ω–æ–º–µ—Ä –Ω–∞ —Ñ–æ—Ä–º—É?</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üíµ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {format_price(product_price, language)}\n\n"
            f"‚ú® <b>–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è (+{format_price(CUSTOMIZATION_PRICE, language)}):</b>\n"
            f"‚Ä¢ –ò–º—è –Ω–∞ —Å–ø–∏–Ω–µ\n‚Ä¢ –ù–æ–º–µ—Ä –Ω–∞ —Å–ø–∏–Ω–µ\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
        )
    else:
        text = (
            f"üé® <b>Formaga ism va raqam qo'shilsinmi?</b>\n\n"
            f"üì¶ Mahsulot: {product_name}\n"
            f"üíµ Asosiy narx: {format_price(product_price, language)}\n\n"
            f"‚ú® <b>Be'zash (+{format_price(CUSTOMIZATION_PRICE, language)}):</b>\n"
            f"‚Ä¢ Orqaga ism\n‚Ä¢ Orqaga raqam\n‚Ä¢ Professional bosma\n\n"
            f"Variantni tanlang:"
        )

    await message.answer(text, parse_mode='HTML', reply_markup=get_customization_keyboard(language))

async def handle_customization_choice(message: types.Message, wants_customization: bool):
    user = get_user(message.from_user.id)
    if not user or message.from_user.id not in user_selections:
        return

    language = user[2]
    selection = user_selections[message.from_user.id]

    if wants_customization:
        selection['customization'] = {'price': CUSTOMIZATION_PRICE}

        if language == 'ru':
            text = "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –¥–ª—è –ø–µ—á–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–†–ê–•–ú–û–ù 7¬ª –∏–ª–∏ ¬´ALI 9¬ª):"
        else:
            text = "‚úçÔ∏è Bosma uchun ism va raqamni kiriting (masalan: ¬´RAHMON 7¬ª yoki ¬´ALI 9¬ª):"

        await message.answer(text, reply_markup=get_back_menu(language))
        user_sessions[message.from_user.id] = {'waiting_customization_text': True}
    else:
        selection['customization'] = None
        category = selection['category']

        if language == 'ru':
            text = f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\nüì¶ {selection['product_name']}\nüíµ {format_price(selection['product_price'], language)}\n\n{get_text('choose_size', language)}"
        else:
            text = f"üõí Siz tanladingiz:\n\nüì¶ {selection['product_name']}\nüíµ {format_price(selection['product_price'], language)}\n\n{get_text('choose_size', language)}"

        await message.answer(text, reply_markup=get_size_keyboard(language, category))

async def handle_customization_text(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if not session.get('waiting_customization_text'):
        return

    user = get_user(user_id)
    if not user or user_id not in user_selections:
        return

    language = user[2]
    selection = user_selections[user_id]

    selection['customization'] = {'price': CUSTOMIZATION_PRICE, 'text': message.text}
    user_sessions[user_id] = {}

    category = selection['category']

    if language == 'ru':
        text = f"‚úÖ –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{message.text}¬ª\n\nüì¶ {selection['product_name']}\nüíµ {format_price(selection['product_price'], language)} + {format_price(CUSTOMIZATION_PRICE, language)}\n\n{get_text('choose_size', language)}"
    else:
        text = f"‚úÖ Be'zash qo'shildi: ¬´{message.text}¬ª\n\nüì¶ {selection['product_name']}\nüíµ {format_price(selection['product_price'], language)} + {format_price(CUSTOMIZATION_PRICE, language)}\n\n{get_text('choose_size', language)}"

    await message.answer(text, reply_markup=get_size_keyboard(language, category))

# –í–´–ë–û–† –†–ê–ó–ú–ï–†–ê
@dp.callback_query(F.data.startswith('size_'))
async def handle_size_selection(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if not user or callback.from_user.id not in user_selections:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä")
        return

    language = user[2]
    size = callback.data.replace('size_', '')

    if size == "help":
        if language == 'ru':
            text = (
                "üìè **–¢–ê–ë–õ–ò–¶–ê –†–ê–ó–ú–ï–†–û–í**\n\n"
                "**üëï –§–£–¢–ë–û–õ–ö–ò –ò –§–û–†–ú–´:**\n"
                "‚Ä¢ S (46-48) - –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: 92-96—Å–º\n"
                "‚Ä¢ M (48-50) - –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: 96-100—Å–º\n"
                "‚Ä¢ L (50-52) - –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: 100-104—Å–º\n"
                "‚Ä¢ XL (52-54) - –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: 104-108—Å–º\n"
                "‚Ä¢ XXL (54-56) - –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: 108-112—Å–º\n\n"
                "**‚öΩ –ë–£–¢–°–´:**\n"
                "‚Ä¢ 40 EU - –î–ª—è —Å—Ç–æ–ø—ã ~25.5—Å–º\n"
                "‚Ä¢ 41 EU - –î–ª—è —Å—Ç–æ–ø—ã ~26.5—Å–º\n"
                "‚Ä¢ 42 EU - –î–ª—è —Å—Ç–æ–ø—ã ~27—Å–º\n"
                "‚Ä¢ 43 EU - –î–ª—è —Å—Ç–æ–ø—ã ~27.5—Å–º\n"
                "‚Ä¢ 44 EU - –î–ª—è —Å—Ç–æ–ø—ã ~28.5—Å–º\n\n"
                "‚ÑπÔ∏è –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ —Ä–∞–∑–º–µ—Ä–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
            )
        else:
            text = (
                "üìè **O ªLCHAMLAR JADVALI**\n\n"
                "**üëï FUTBOLKALAR VA FORMALAR:**\n"
                "‚Ä¢ S (46-48) - Ko'krak qafasi: 92-96sm\n"
                "‚Ä¢ M (48-50) - Ko'krak qafasi: 96-100sm\n"
                "‚Ä¢ L (50-52) - Ko'krak qafasi: 100-104sm\n"
                "‚Ä¢ XL (52-54) - Ko'krak qafasi: 104-108sm\n"
                "‚Ä¢ XXL (54-56) - Ko'krak qafasi: 108-112sm\n\n"
                "**‚öΩ FUTBOLKALAR:**\n"
                "‚Ä¢ 40 EU - Oyoq uchun ~25.5sm\n"
                "‚Ä¢ 41 EU - Oyoq uchun ~26.5sm\n"
                "‚Ä¢ 42 EU - Oyoq uchun ~27sm\n"
                "‚Ä¢ 43 EU - Oyoq uchun ~27.5sm\n"
                "‚Ä¢ 44 EU - Oyoq uchun ~28.5sm\n\n"
                "‚ÑπÔ∏è O ªlchamda shubhangiz bo ªlsa, bizga yozing!"
            )

        await callback.message.answer(text, parse_mode='HTML')
        await callback.answer()
        return

    selection = user_selections[callback.from_user.id]
    selection['size'] = size

    if callback.from_user.id not in user_carts:
        user_carts[callback.from_user.id] = []

    user_carts[callback.from_user.id].append(selection.copy())

    if language == 'ru':
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! –†–∞–∑–º–µ—Ä: {size}")
    else:
        await callback.message.answer(f"‚úÖ Mahsulot savatga qo'shildi! O ªlcham: {size}")

    await show_cart(callback.from_user.id, language, callback.message)
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–∫–æ–º–∞–Ω–¥–∞)
async def show_cart_command(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    language = user[2]
    await show_cart(message.from_user.id, language, message)

async def add_more_products(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return

    language = user[2]
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:" if language == 'ru' else "üìã Toifani tanlang:",
                   reply_markup=get_catalog_keyboard(language))

async def checkout_cart(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return

    language = user[2]
    cart = user_carts.get(message.from_user.id, [])

    if not cart:
        if language == 'ru':
            await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        else:
            await message.answer("‚ùå Savat bo'sh")
        return

    total_price = sum(item['product_price'] + (item.get('customization', {}).get('price', 0) if item.get('customization') else 0) for item in cart)

    if language == 'ru':
        text = f"üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–¢–æ–≤–∞—Ä–æ–≤: {len(cart)}\nüí∞ –°—É–º–º–∞: {format_price(total_price, language)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    else:
        text = f"üõí Buyurtma rasmiylashtirish\n\nMahsulotlar: {len(cart)}\nüí∞ Summa: {format_price(total_price, language)}\n\nTo'lov usulini tanlang:"

    user_sessions[message.from_user.id] = {'checkout_cart': cart.copy()}
    await message.answer(text, reply_markup=get_payment_menu(language))

async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_carts:
        del user_carts[user_id]

    user = get_user(user_id)
    if user:
        language = user[2]
        if language == 'ru':
            await message.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=get_main_menu(language))
        else:
            await message.answer("‚úÖ Savat tozalandi", reply_markup=get_main_menu(language))

# –û–ü–õ–ê–¢–ê
async def handle_payment(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return

    phone, name, language, region, post_office = user

    if message.text in ["‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå Bekor qilish"]:
        await handle_cancel(message)
        return

    session = user_sessions.get(message.from_user.id, {})
    cart = session.get('checkout_cart', [])
    if not cart:
        if language == 'ru':
            await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        else:
            await message.answer("‚ùå Savat bo'sh")
        return

    total_price = sum(item['product_price'] + (item.get('customization', {}).get('price', 0) if item.get('customization') else 0) for item in cart)

    order_ids = []

    for item in cart:
        order_id = save_order(
            message.from_user.id, phone, name, region, post_office,
            item['product_name'], item['product_price'],
            item.get('size'),
            item.get('customization', {}).get('text') if item.get('customization') else None,
            item.get('customization', {}).get('price', 0) if item.get('customization') else 0,
            'card_pending'
        )
        order_ids.append(order_id)

    if language == 'ru':
        text = (
            f"üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n\n"
            f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {len(cart)}\n"
            f"üíµ –°—É–º–º–∞: {format_price(total_price, language)}\n\n"
            f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
            f"<code>{CARD_NUMBER}</code>\n\n"
            f"üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
            f"–ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∑–∞–∫–∞–∑—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
        )
    else:
        text = (
            f"üí≥ Karta orqali to'lash\n\n"
            f"üì¶ Buyurtmalar: {len(cart)}\n"
            f"üíµ Summa: {format_price(total_price, language)}\n\n"
            f"üîÑ Kartaga o'tkazing:\n"
            f"<code>{CARD_NUMBER}</code>\n\n"
            f"üì∏ O'tkazishdan so'ng chek skrinshotini yuboring\n"
            f"Buyurtmalarni 15 daqiqa ichida tasdiqlaymiz!"
        )

    await message.answer(text, parse_mode='HTML')
    user_sessions[message.from_user.id] = {'waiting_receipt': True, 'order_ids': order_ids, 'checkout_cart': cart.copy()}

# –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–ö–ê –û–ü–õ–ê–¢–´
@dp.message(F.photo)
async def handle_receipt_photo(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if not session.get('waiting_receipt'):
        return

    user = get_user(user_id)
    if not user:
        return

    language = user[2]
    order_ids = session.get('order_ids', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone, name, language, region, post_office = user

    for order_id in order_ids:
        update_order_status(order_id, 'waiting_confirm')

    cart = session.get('checkout_cart', [])
    order_details = []
    total_price = 0

    for item in cart:
        item_price = item['product_price'] + (item.get('customization', {}).get('price', 0) if item.get('customization') else 0)
        total_price += item_price

        item_detail = f"‚Ä¢ {item['product_name']}"
        if item.get('size'):
            item_detail += f" | –†–∞–∑–º–µ—Ä: {item['size']}"
        if item.get('customization'):
            item_detail += f" | –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è: {item['customization']['text']}"
        item_detail += f" | {format_price(item_price, 'ru')}"
        order_details.append(item_detail)

    admin_text = (
        f"üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó –° –û–ü–õ–ê–¢–û–ô\n\n"
        f"üë§ {name} (@{message.from_user.username or 'N/A'})\n"
        f"üìû {phone}\n"
        f"üèôÔ∏è {REGIONS['ru'].get(region, region)}\n"
        f"üìÆ {post_office}\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä—ã:\n" + "\n".join(order_details) + f"\n\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {format_price(total_price, 'ru')}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: –∫–∞—Ä—Ç–æ–π ‚úÖ\n"
        f"üÜî –ó–∞–∫–∞–∑—ã: {', '.join(map(str, order_ids))}\n"
        f"üïí {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )

    try:
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ —á–µ–∫–∞
        for admin_id in ADMIN_IDS:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_message(admin_id, admin_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞
                await bot.send_photo(admin_id, message.photo[-1].file_id, 
                                   caption=f"üì∏ –ß–µ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: {', '.join(map(str, order_ids))}")
                
                # üî• –î–û–ü–û–õ–ù–ï–ù–ò–ï: –ï—Å–ª–∏ —ç—Ç–æ –¢–∞—à–∫–µ–Ω—Ç –∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
                if region == 'tashkent' and '–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è' in post_office.lower():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    import re
                    coords = re.findall(r'[-]?\d+\.\d+', post_office)
                    if len(coords) == 2:
                        lat, lon = float(coords[0]), float(coords[1])
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                        await bot.send_location(admin_id, latitude=lat, longitude=lon,
                                              caption=f"üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {name}")
                        
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        if language == 'ru':
            await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –∏ —Å–∫–æ—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à –∑–∞–∫–∞–∑.", reply_markup=get_main_menu(language))
        else:
            await message.answer("‚úÖ Chek qabul qilindi! Biz to'lovni tekshiramiz va tez orada buyurtmangizni tasdiqlaymiz.", reply_markup=get_main_menu(language))

        if user_id in user_carts:
            del user_carts[user_id]
        user_sessions[user_id] = {}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: {e}")
        if language == 'ru':
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("‚ùå Chek yuborishda xatolik. Qayta urinib ko'ring.")

# –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í
async def show_reviews_menu(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user
    if language == 'ru':
        text = "‚≠ê –ú–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤!"
    else:
        text = "‚≠ê Mijozlar fikri\n\nBu yerda mijozlarimiz sharhlarini ko'rishingiz yoki o'z sharhingizni qoldirishingiz mumkin!"

    await message.answer(text, reply_markup=get_reviews_menu(language))

async def show_reviews(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return

    phone, name, language, region, post_office = user

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT customer_name, review_text_ru, review_text_uz, photo_url, rating FROM reviews ORDER BY created_at DESC LIMIT 10")
        reviews = cursor.fetchall()

    if not reviews:
        if language == 'ru':
            await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
        else:
            await message.answer("üòî Hozircha sharhlar yo'q")
        return

    for review in reviews:
        customer_name, review_text_ru, review_text_uz, photo_url, rating = review

        stars = "‚≠ê" * rating
        review_text = review_text_ru if language == 'ru' else review_text_uz

        caption = f"{stars}\nüë§ {customer_name}\nüí¨ {review_text}"

        try:
            if photo_url:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo_url,
                    caption=caption
                )
            else:
                await message.answer(caption)
        except Exception:
            await message.answer(caption)

async def start_review(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return

    phone, name, language, region, post_office = user

    if language == 'ru':
        text = (
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!\n\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n"
            "‚Ä¢ –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ\n\n"
            "–ú—ã –¥–æ–±–∞–≤–∏–º –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!"
        )
    else:
        text = (
            "‚úçÔ∏è Do'konimiz haqida sharhingizni yozing!\n\n"
            "Yuborishingiz mumkin:\n"
            "‚Ä¢ Sharh matni\n"
            "‚Ä¢ Rasm + matn\n"
            "‚Ä¢ Shunchaki rasm\n\n"
            "Biz sharhingizni kanalimizga qo'shamiz!"
        )

    await message.answer(text)
    user_sessions[message.from_user.id] = {'waiting_review': True}

# –ú–û–ò –ó–ê–ö–ê–ó–´
async def show_my_orders(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user
    orders = get_user_orders(message.from_user.id, language)

    if orders:
        if language == 'ru':
            response = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        else:
            response = "üì¶ Sizning buyurtmalaringiz:\n\n"

        for i, (product_name, product_price, customization_price, status, payment, created_at) in enumerate(orders, 1):
            total_price = product_price + (customization_price or 0)
            status_icon = "‚úÖ" if status == "confirmed" else "üîÑ" if status == "waiting_confirm" else "üÜï"

            status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if status == "confirmed" else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if status == "waiting_confirm" else "–ù–æ–≤—ã–π"
            if language == 'uz':
                status_text = "Tasdiqlangan" if status == "confirmed" else "Tasdiqlanish kutilmoqda" if status == "waiting_confirm" else "Yangi"

            response += f"{i}. {product_name}\n"
            response += f"üíµ {format_price(total_price, language)}\n"
            response += f"{status_icon} {status_text}\n"
            response += f"üìÖ {created_at[:16]}\n\n"
    else:
        if language == 'ru':
            response = "üì¶ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
        else:
            response = "üì¶ Sizda hali buyurtmalar yo'q"

    await message.answer(response, reply_markup=get_main_menu(language))

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
async def show_help(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return

    phone, name, language, region, post_office = user
    await message.answer(get_text('help_text', language), parse_mode='HTML')
    support_requests[message.from_user.id] = {'waiting_question': True}

async def back_to_main_menu(message: types.Message):
    user = get_user(message.from_user.id)
    if user:
        language = user[2]
        await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if language == 'ru' else "üìã Asosiy menyu:",
                           reply_markup=get_main_menu(language))

async def back_to_catalog(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return

    language = user[2]
    await show_catalog(message)

async def handle_cancel(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if user:
        language = user[2]
        if user_id in user_selections:
            del user_selections[user_id]
        if user_id in user_sessions:
            user_sessions[user_id] = {}

        await message.answer(get_text('order_cancelled', language),
                           reply_markup=get_main_menu(language))

# ================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==================
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    admin_sessions[message.from_user.id] = {'is_admin': True}
    await message.answer("üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@dp.message(F.text.in_(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¶ –ó–∞–∫–∞–∑—ã", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üìù –û—Ç–∑—ã–≤—ã", "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"]))
async def handle_admin_commands(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = get_statistics()
        text = (
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{stats['total_orders']}</b>\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: <b>{format_price(stats['total_revenue'], 'ru')}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:</b>\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ: <b>{stats['status_stats'].get('confirmed', 0)}</b>\n"
            f"üîÑ –û–∂–∏–¥–∞—é—Ç: <b>{stats['status_stats'].get('waiting_confirm', 0)}</b>\n"
            f"üÜï –ù–æ–≤—ã–µ: <b>{stats['status_stats'].get('new', 0)}</b>\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: <b>{stats['status_stats'].get('cancelled', 0)}</b>"
        )
        await message.answer(text, parse_mode='HTML')

    elif message.text == "üì¶ –ó–∞–∫–∞–∑—ã":
        await message.answer("üì¶ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò</b>", parse_mode='HTML', reply_markup=get_orders_menu())

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        admin_sessions[message.from_user.id] = {'adding_product': True, 'step': 'category'}
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_categories_keyboard())

    elif message.text == "üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏":
        await message.answer("üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=get_products_management_keyboard())

    elif message.text == "üìù –û—Ç–∑—ã–≤—ã":
        reviews = get_all_reviews()
        if not reviews:
            await message.answer("üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
            return

        for review in reviews[:5]:
            customer_name, review_text_ru, review_text_uz, photo_url, rating, created_at = review
            stars = "‚≠ê" * rating
            text = f"{stars}\nüë§ {customer_name}\nüí¨ {review_text_ru}\nüìÖ {created_at[:16]}"

            if photo_url:
                await message.answer_photo(photo_url, caption=text)
            else:
                await message.answer(text)

    elif message.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
        if message.from_user.id in admin_sessions:
            del admin_sessions[message.from_user.id]
        await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
@dp.message(F.text.in_(["üëï –§–æ—Ä–º—ã 2024/2025", "üï∞Ô∏è –†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã", "‚öΩ –ë—É—Ç—Å—ã", "üéÅ –§—É—Ç. –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞", "üî• –ê–∫—Ü–∏–∏"]))
async def handle_product_category(message: types.Message):
    if message.from_user.id not in ADMIN_IDS or not admin_sessions.get(message.from_user.id, {}).get('adding_product'):
        return

    category_map = {
        "üëï –§–æ—Ä–º—ã 2024/2025": ("–§–æ—Ä–º—ã 2024/2025", "2024/2025 Formalari"),
        "üï∞Ô∏è –†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã": ("–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º—ã", "Retro Formalari"),
        "‚öΩ –ë—É—Ç—Å—ã": ("–ë—É—Ç—Å—ã", "Futbolkalar"),
        "üéÅ –§—É—Ç. –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞": ("–§—É—Ç–±–æ–ª—å–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞", "Futbol Aksessuarlari"),
        "üî• –ê–∫—Ü–∏–∏": ("–ê–∫—Ü–∏–∏", "Aksiyalar")
    }

    category_ru, category_uz = category_map[message.text]
    admin_sessions[message.from_user.id].update({
        'step': 'name_ru',
        'category_ru': category_ru,
        'category_uz': category_uz
    })

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
@dp.message(F.text)
async def handle_product_creation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS or not admin_sessions.get(user_id, {}).get('adding_product'):
        return await handle_main_menu(message)

    session = admin_sessions[user_id]
    step = session.get('step')

    if step == 'name_ru':
        session['name_ru'] = message.text
        session['step'] = 'name_uz'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º:")

    elif step == 'name_uz':
        session['name_uz'] = message.text
        session['step'] = 'price'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")

    elif step == 'price':
        try:
            session['price'] = int(message.text)
            session['step'] = 'description_ru'
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")

    elif step == 'description_ru':
        session['description_ru'] = message.text
        session['step'] = 'description_uz'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º:")

    elif step == 'description_uz':
        session['description_uz'] = message.text
        session['step'] = 'sizes_ru'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

    elif step == 'sizes_ru':
        session['sizes_ru'] = message.text
        session['step'] = 'sizes_uz'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

    elif step == 'sizes_uz':
        session['sizes_uz'] = message.text
        session['step'] = 'image'
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ):")

    elif step == 'image':
        if message.text and message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            product_data = {
                'name_ru': session['name_ru'],
                'name_uz': session['name_uz'],
                'price': session['price'],
                'category_ru': session['category_ru'],
                'category_uz': session['category_uz'],
                'description_ru': session['description_ru'],
                'description_uz': session['description_uz'],
                'sizes_ru': session['sizes_ru'],
                'sizes_uz': session['sizes_uz'],
                'image_url': None
            }

            product_id = add_product(**product_data)
            del admin_sessions[user_id]

            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {product_id}", reply_markup=get_admin_menu())

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏)
@dp.message(F.photo)
async def handle_product_photo(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS or not admin_sessions.get(user_id, {}).get('adding_product'):
        return

    session = admin_sessions[user_id]
    if session.get('step') == 'image':
        product_data = {
            'name_ru': session['name_ru'],
            'name_uz': session['name_uz'],
            'price': session['price'],
            'category_ru': session['category_ru'],
            'category_uz': session['category_uz'],
            'description_ru': session['description_ru'],
            'description_uz': session['description_uz'],
            'sizes_ru': session['sizes_ru'],
            'sizes_uz': session['sizes_uz'],
            'image_url': message.photo[-1].file_id
        }

        product_id = add_product(**product_data)
        del admin_sessions[user_id]

        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {product_id}", reply_markup=get_admin_menu())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏: callback'–∏
@dp.callback_query(F.data.startswith("admin_products_"))
async def handle_products_management_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    action = callback.data

    if action == "admin_products_view":
        products = get_all_products()

        if not products:
            await callback.message.answer("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        for product in products:
            product_id, name_ru, name_uz, price = product
            text = f"üÜî {product_id}\nüè∑Ô∏è {name_ru}\nüíµ {format_price(price, 'ru')}"
            await callback.message.answer(text)

        await callback.message.answer("üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ")

    elif action == "admin_products_delete":
        products = get_all_products()

        if not products:
            await callback.message.answer("üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        await callback.message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                    reply_markup=get_products_list_keyboard(products, "delete_product"))

    elif action == "admin_products_back":
        await callback.message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu())

    await callback.answer()

@dp.callback_query(F.data.startswith("delete_product_"))
async def handle_delete_product(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    try:
        product_id = int(callback.data.replace("delete_product_", ""))
    except:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        return

    if delete_product(product_id):
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    else:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ #{product_id}")

    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)
@dp.callback_query(F.data.startswith("admin_orders_"))
async def handle_admin_orders(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    status_map = {
        "admin_orders_pending": "waiting_confirm",
        "admin_orders_confirmed": "confirmed",
        "admin_orders_all": None
    }

    status = status_map[callback.data]
    orders = get_all_orders(status)

    if not orders:
        await callback.message.answer("üì¶ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    for order in orders[:10]:
        order_id, user_id, user_name, user_phone, user_region, user_post_office, product_name, product_price, product_size, customization_text, customization_price, order_status, created_at = order

        status_emoji = {
            'new': 'üÜï',
            'waiting_confirm': 'üîÑ',
            'confirmed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order_status, 'üì¶')

        text = (
            f"{status_emoji} <b>–ó–ê–ö–ê–ó #{order_id}</b>\n\n"
            f"üë§ <b>{user_name}</b>\n"
            f"üìû {user_phone}\n"
            f"üèôÔ∏è {REGIONS['ru'].get(user_region, user_region)}\n"
            f"üìÆ {user_post_office}\n\n"
            f"üì¶ <b>{product_name}</b>\n"
            f"üìè –†–∞–∑–º–µ—Ä: {product_size or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        )

        if customization_text:
            text += f"‚ú® –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è: {customization_text}\n"

        total_price = product_price + (customization_price or 0)
        text += f"üíµ –°—É–º–º–∞: {format_price(total_price, 'ru')}\n"
        text += f"üìÖ {created_at[:16]}\n"
        text += f"üî∞ –°—Ç–∞—Ç—É—Å: {order_status}"

        await callback.message.answer(text, parse_mode='HTML', reply_markup=get_order_actions(order_id))

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–∫–æ–Ω—Ç–∞–∫—Ç)
@dp.callback_query(F.data.startswith("confirm_") | F.data.startswith("reject_") | F.data.startswith("contact_"))
async def handle_order_actions(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    data = callback.data
    if "_" not in data:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    action, order_id_str = data.split("_", 1)
    try:
        order_id = int(order_id_str)
    except:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
        return

    order = get_order_by_id(order_id)

    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if action == "confirm":
        update_order_status(order_id, 'confirmed', callback.from_user.id)
        await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

        user_id = order[1]
        try:
            await bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–∫–æ—Ä–æ –º—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–º.")
        except Exception:
            pass

    elif action == "reject":
        update_order_status(order_id, 'cancelled', callback.from_user.id)
        await callback.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")

        user_id = order[1]
        try:
            await bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.")
        except Exception:
            pass

    elif action == "contact":
        user_phone = order[3]
        user_name = order[2]
        await callback.message.answer(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüë§ {user_name}\nüìû {user_phone}")

    await callback.answer()

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    try:
        setup_database()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω: {'*' * 10}{API_TOKEN[-5:]}")
        logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        logger.info(f"üí≥ –ö–∞—Ä—Ç–∞: {CARD_NUMBER}")
        logger.info("‚≠ê –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –≥–æ—Ç–æ–≤–∞!")
        logger.info("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤!")
        logger.info("üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞")
        logger.info("üìç –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ—á—Ç–æ–≤—ã–º–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        logger.info("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

        await asyncio.gather(
            start_web_server(),
            dp.start_polling(bot)
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())