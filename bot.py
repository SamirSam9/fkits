import asyncio
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command
from dotenv import load_dotenv
import os

load_dotenv()

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_IDS = [5009858379, 587180281, 1225271746]  # üëà –ó–î–ï–°–¨ –ú–û–ñ–ù–û –ú–ï–ù–Ø–¢–¨ –ê–î–ú–ò–ù–û–í

# üëá –ó–î–ï–°–¨ –ú–ï–ù–Ø–ô –ù–û–ú–ï–† –ö–ê–†–¢–´ –ù–ê –°–í–û–ô
CARD_NUMBER = "8600 1234 5678 9012"  # üéØ –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–£–Æ –ö–ê–†–¢–£

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
def setup_database():
    conn = sqlite3.connect('football_shop.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            phone TEXT NOT NULL,
            name TEXT NOT NULL,
            language TEXT DEFAULT 'ru',
            location TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name_ru TEXT NOT NULL,
            name_uz TEXT NOT NULL,
            price TEXT NOT NULL,
            category_ru TEXT NOT NULL,
            category_uz TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_phone TEXT NOT NULL,
            user_name TEXT,
            user_location TEXT,
            product_name TEXT NOT NULL,
            product_price TEXT NOT NULL,
            payment_method TEXT DEFAULT 'cash',
            status TEXT DEFAULT 'new',
            receipt_photo_id TEXT,
            confirmed_by INTEGER,
            confirmed_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        test_products = [
            ('–ë—É—Ç—Å—ã Nike Mercurial', 'Nike Mercurial futbolka', '350,000 UZS', '–ë—É—Ç—Å—ã', 'Futbolkalar'),
            ('–§–æ—Ä–º–∞ –ü–∞—Ö—Ç–∞–∫–æ—Ä–∞ 2024', 'Paxtakor 2024 formasi', '150,000 UZS', '–§–æ—Ä–º—ã', 'Formalar'),
            ('–†–µ—Ç—Ä–æ —Ñ–æ—Ä–º–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω 1994', 'O ªzbekiston 1994 retro formasi', '200,000 UZS', '–†–µ—Ç—Ä–æ', 'Retro'),
            ('–§–æ—Ä–º–∞ –ù–∞—Å–∞—Ñ–∞ 2024', 'Nasaf 2024 formasi', '140,000 UZS', '–§–æ—Ä–º—ã', 'Formalar'),
            ('–ë—É—Ç—Å—ã Adidas Predator', 'Adidas Predator futbolka', '320,000 UZS', '–ë—É—Ç—Å—ã', 'Futbolkalar'),
            ('üî• –ê–ö–¶–ò–Ø: –§–æ—Ä–º–∞ + –±—É—Ç—Å—ã', 'üî• AKSIYA: Forma + futbolka', '450,000 UZS', '–ê–∫—Ü–∏–∏', 'Aksiyalar')
        ]
        cursor.executemany("INSERT INTO products (name_ru, name_uz, price, category_ru, category_uz) VALUES (?, ?, ?, ?, ?)", test_products)
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

# ================== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==================
user_sessions = {}
user_selections = {}

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def get_language_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"))
    builder.add(KeyboardButton(text="üá∫üáø O'zbekcha"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_contact_keyboard(language):
    text = "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if language == 'ru' else "üìû Kontaktni yuborish"
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=text, request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_location_keyboard(language):
    text = "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é" if language == 'ru' else "üìç Manzilni yuborish"
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=text, request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_main_menu(language):
    builder = ReplyKeyboardBuilder()
    
    if language == 'ru':
        builder.add(KeyboardButton(text="‚öΩ –ë—É—Ç—Å—ã"))
        builder.add(KeyboardButton(text="üëï –§–æ—Ä–º—ã")) 
        builder.add(KeyboardButton(text="üï∞Ô∏è –†–µ—Ç—Ä–æ"))
        builder.add(KeyboardButton(text="üî• –ê–∫—Ü–∏–∏"))
        builder.add(KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    else:
        builder.add(KeyboardButton(text="‚öΩ Futbolkalar"))
        builder.add(KeyboardButton(text="üëï Formalar")) 
        builder.add(KeyboardButton(text="üï∞Ô∏è Retro"))
        builder.add(KeyboardButton(text="üî• Aksiyalar"))
        builder.add(KeyboardButton(text="üì¶ Mening buyurtmalarim"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è Yordam"))
    
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)

def get_payment_menu(language):
    builder = ReplyKeyboardBuilder()
    
    if language == 'ru':
        builder.add(KeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"))
        builder.add(KeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ"))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    else:
        builder.add(KeyboardButton(text="üí≥ Karta orqali to'lash"))
        builder.add(KeyboardButton(text="üíµ Naqd pul"))
        builder.add(KeyboardButton(text="‚Ü©Ô∏è Menyuga qaytish"))
    
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

def get_back_menu(language):
    text = "‚Ü©Ô∏è –ù–∞–∑–∞–¥" if language == 'ru' else "‚Ü©Ô∏è Orqaga"
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=text)]],
        resize_keyboard=True
    )

# ================== –¢–ï–ö–°–¢–´ –ù–ê –î–í–£–• –Ø–ó–´–ö–ê–• ==================
def get_text(key, language):
    texts = {
        'welcome': {
            'ru': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FootballKits.uz! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            'uz': "üëã FootballKits.uz ga xush kelibsiz! Tilni tanlang:"
        },
        'contact_request': {
            'ru': "üìû –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            'uz': "üìû Davom etish uchun kontaktni ulashing:"
        },
        'location_request': {
            'ru': "üìç –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
            'uz': "üìç Endi yetkazib berish uchun manzilingizni ulashing:"
        },
        'contact_received': {
            'ru': "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!",
            'uz': "‚úÖ Kontakt qabul qilindi!"
        },
        'location_received': {
            'ru': "‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã:",
            'uz': "‚úÖ Manzil qabul qilindi! Endi mahsulotlarni tanlashingiz mumkin:"
        },
        'no_contact': {
            'ru': "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!",
            'uz': "‚ùå Avval kontaktni ulashing!"
        },
        'no_location': {
            'ru': "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π!",
            'uz': "‚ùå Avval manzilni ulashing!"
        },
        'help_text': {
            'ru': "ü§ù –ü–æ–º–æ—â—å\n\nüìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: +998901234567\nüìç –ê–¥—Ä–µ—Å: –¢–∞—à–∫–µ–Ω—Ç, –ß–æ—Ä—Å—É\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-18:00\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            'uz': "ü§ù Yordam\n\nüìû Qo'llab-quvvatlash: +998901234567\nüìç Manzil: Toshkent, Chorsu\n‚è∞ Ish vaqti: 9:00-18:00\n\nMahsulot toifasini tanlang:"
        }
    }
    return texts.get(key, {}).get(language, key)

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
def get_db_connection():
    return sqlite3.connect('football_shop.db', check_same_thread=False)

def save_user(user_id, phone, name, language, location=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, phone, name, language, location) VALUES (?, ?, ?, ?, ?)",
        (user_id, phone, name, language, location)
    )
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT phone, name, language, location FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def get_products_by_category(category, language):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    if language == 'ru':
        cursor.execute("SELECT id, name_ru, price FROM products WHERE category_ru = ?", (category,))
    else:
        cursor.execute("SELECT id, name_uz, price FROM products WHERE category_uz = ?", (category,))
        
    products = cursor.fetchall()
    conn.close()
    return products

def get_product_by_id(product_id, language):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    if language == 'ru':
        cursor.execute("SELECT name_ru, price FROM products WHERE id = ?", (product_id,))
    else:
        cursor.execute("SELECT name_uz, price FROM products WHERE id = ?", (product_id,))
        
    product = cursor.fetchone()
    conn.close()
    return product

def save_order(user_id, phone, name, location, product_name, product_price, payment_method='cash'):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """INSERT INTO orders (user_id, user_phone, user_name, user_location, product_name, product_price, payment_method) 
        VALUES (?, ?, ?, ?, ?, ?, ?)""",
        (user_id, phone, name, location, product_name, product_price, payment_method)
    )
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id

def get_user_orders(user_id, language):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """SELECT product_name, product_price, status, payment_method, created_at 
        FROM orders WHERE user_id = ? ORDER BY created_at DESC LIMIT 5""",
        (user_id,)
    )
    orders = cursor.fetchall()
    conn.close()
    return orders

def update_order_status(order_id, status, admin_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if admin_id:
        cursor.execute("UPDATE orders SET status = ?, confirmed_by = ?, confirmed_at = CURRENT_TIMESTAMP WHERE id = ?", 
                      (status, admin_id, order_id))
    else:
        cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))
    conn.commit()
    conn.close()

# ================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú ==================
async def notify_admins(order_text):
    for admin_id in ADMIN_IDS:  # üëà –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –í–°–ï–ú –ê–î–ú–ò–ù–ê–ú –ò–ó –°–ü–ò–°–ö–ê
        try:
            await bot.send_message(admin_id, order_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# ================== –û–¢–ß–ï–¢–´ ==================
async def send_monthly_report():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ 1-–≥–æ —á–∏—Å–ª–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT COUNT(*), 
                   SUM(CAST(REPLACE(REPLACE(product_price, ' UZS', ''), ',', '') AS INTEGER)) 
            FROM orders 
            WHERE strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now', '-1 month')
            AND status = 'confirmed'
        """)
        result = cursor.fetchone()
        month_orders = result[0] or 0
        month_revenue = result[1] or 0
        
        cursor.execute("""
            SELECT product_name, COUNT(*) as order_count 
            FROM orders 
            WHERE strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now', '-1 month')
            AND status = 'confirmed'
            GROUP BY product_name 
            ORDER BY order_count DESC 
            LIMIT 3
        """)
        popular_products = cursor.fetchall()
        
        conn.close()
        
        report_text = (
            f"üìä –ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢\n\n"
            f"üì¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {month_orders}\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {month_revenue:,} UZS\n\n"
            f"üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        )
        
        for product, count in popular_products:
            report_text += f"‚Ä¢ {product} - {count} –∑–∞–∫.\n"
        
        report_text += f"\nüìÖ {datetime.now().strftime('%B %Y')}"
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, report_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def scheduled_reports():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    while True:
        now = datetime.now()
        if now.day == 1 and now.hour == 9 and now.minute == 0:
            await send_monthly_report()
        await asyncio.sleep(60)

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def start_bot(message: types.Message):
    user_sessions[message.from_user.id] = {'step': 'language'}
    await message.answer(get_text('welcome', 'ru'), reply_markup=get_language_keyboard())

# –í–´–ë–û–† –Ø–ó–´–ö–ê
@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha"]))
async def handle_language(message: types.Message):
    user_id = message.from_user.id
    language = 'ru' if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else 'uz'
    
    user_sessions[user_id] = {'step': 'contact', 'language': language}
    await message.answer(get_text('contact_request', language), reply_markup=get_contact_keyboard(language))

# –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê
@dp.message(F.contact)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})
    
    if session.get('step') != 'contact':
        return
    
    language = session.get('language', 'ru')
    phone = message.contact.phone_number
    name = message.contact.first_name
    
    save_user(user_id, phone, name, language)
    user_sessions[user_id]['step'] = 'location'
    user_sessions[user_id]['phone'] = phone
    user_sessions[user_id]['name'] = name
    
    await message.answer(get_text('contact_received', language))
    await message.answer(get_text('location_request', language), reply_markup=get_location_keyboard(language))

# –ü–û–õ–£–ß–ï–ù–ò–ï –õ–û–ö–ê–¶–ò–ò
@dp.message(F.location)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})
    
    if session.get('step') != 'location':
        return
    
    language = session.get('language', 'ru')
    location = f"{message.location.latitude},{message.location.longitude}"
    
    save_user(user_id, session['phone'], session['name'], language, location)
    user_sessions[user_id]['step'] = 'main_menu'
    
    await message.answer(get_text('location_received', language), reply_markup=get_main_menu(language))

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô
@dp.message(F.text.in_(["‚öΩ –ë—É—Ç—Å—ã", "‚öΩ Futbolkalar"]))
async def show_boots(message: types.Message):
    await show_category_products(message, "–ë—É—Ç—Å—ã", "Futbolkalar")

@dp.message(F.text.in_(["üëï –§–æ—Ä–º—ã", "üëï Formalar"]))
async def show_forms(message: types.Message):
    await show_category_products(message, "–§–æ—Ä–º—ã", "Formalar")

@dp.message(F.text.in_(["üï∞Ô∏è –†–µ—Ç—Ä–æ", "üï∞Ô∏è Retro"]))
async def show_retro(message: types.Message):
    await show_category_products(message, "–†–µ—Ç—Ä–æ", "Retro")

@dp.message(F.text.in_(["üî• –ê–∫—Ü–∏–∏", "üî• Aksiyalar"]))
async def show_sales(message: types.Message):
    await show_category_products(message, "–ê–∫—Ü–∏–∏", "Aksiyalar")

@dp.message(F.text.in_(["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è Yordam"]))
async def show_help(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    phone, name, language, location = user
    await message.answer(get_text('help_text', language), reply_markup=get_main_menu(language))

async def show_category_products(message: types.Message, category_ru: str, category_uz: str):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    phone, name, language, location = user
    
    if not location:
        text = get_text('no_location', language)
        await message.answer(text)
        return
        
    products = get_products_by_category(category_ru, language)
    
    if products:
        if language == 'ru':
            response = f"üè∑Ô∏è {category_ru}:\n\n"
        else:
            response = f"üè∑Ô∏è {category_uz}:\n\n"
            
        for product_id, name, price in products:
            response += f"üÜî {product_id}. {name}\nüíµ {price}\n\n"
        
        if language == 'ru':
            response += "–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞"
        else:
            response += "Buyurtma berish uchun mahsulot raqamini yozing"
            
        await message.answer(response, reply_markup=get_back_menu(language))
    else:
        if language == 'ru':
            await message.answer(f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_ru}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=get_main_menu(language))
        else:
            await message.answer(f"üòî '{category_uz}' toifasida hozircha mahsulotlar yo'q", reply_markup=get_main_menu(language))

# –í–´–ë–û–† –¢–û–í–ê–†–ê
@dp.message(F.text.regexp(r'^\d+$'))
async def handle_product_selection(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    phone, name, language, location = user
    
    try:
        product_id = int(message.text)
        product = get_product_by_id(product_id, language)
        
        if product:
            product_name, product_price = product
            user_selections[message.from_user.id] = {
                'product_id': product_id,
                'product_name': product_name, 
                'product_price': product_price
            }
            
            if language == 'ru':
                text = f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\nüì¶ {product_name}\nüíµ {product_price}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
            else:
                text = f"üõí Siz tanladingiz:\n\nüì¶ {product_name}\nüíµ {product_price}\n\nTo'lov usulini tanlang:"
                
            await message.answer(text, reply_markup=get_payment_menu(language))
        else:
            if language == 'ru':
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await message.answer("‚ùå Mahsulot topilmadi")
            
    except Exception as e:
        if language == 'ru':
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞")
        else:
            await message.answer("‚ùå Mahsulotni tanlashda xato")

# –í–´–ë–û–† –û–ü–õ–ê–¢–´
@dp.message(F.text.in_(["üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", "üí≥ Karta orqali to'lash", "üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üíµ Naqd pul"]))
async def handle_payment(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or message.from_user.id not in user_selections:
        if user:
            language = user[2]
            if language == 'ru':
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä")
            else:
                await message.answer("‚ùå Avval mahsulotni tanlang")
        return
    
    selection = user_selections[message.from_user.id]
    product_name = selection['product_name']
    product_price = selection['product_price']
    phone, name, language, location = user
    
    is_card = message.text in ["üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", "üí≥ Karta orqali to'lash"]
    
    if is_card:
        order_id = save_order(message.from_user.id, phone, name, location, product_name, product_price, 'card_pending')
        
        if language == 'ru':
            text = (
                f"üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n\n"
                f"üì¶ –ó–∞–∫–∞–∑: {product_name}\n"
                f"üíµ –°—É–º–º–∞: {product_price}\n\n"
                f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
                f"<code>{CARD_NUMBER}</code>\n\n"
                f"üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
                f"–ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
            )
        else:
            text = (
                f"üí≥ Karta orqali to'lash\n\n"
                f"üì¶ Buyurtma: {product_name}\n"
                f"üíµ Summa: {product_price}\n\n"
                f"üîÑ Kartaga o'tkazing:\n"
                f"<code>{CARD_NUMBER}</code>\n\n"
                f"üì∏ O'tkazishdan so'ng chek skrinshotini yuboring\n"
                f"Buyurtmani 15 daqiqa ichida tasdiqlaymiz!"
            )
        
        await message.answer(text, parse_mode='HTML')
        user_sessions[message.from_user.id]['waiting_receipt'] = True
        user_sessions[message.from_user.id]['order_id'] = order_id
            
    else:  # –ù–∞–ª–∏—á–Ω—ã–µ
        order_id = save_order(message.from_user.id, phone, name, location, product_name, product_price, 'cash')
        if language == 'ru':
            text = f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n\nüì¶ {product_name}\nüíµ {product_price}\nüíµ –û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
        else:
            text = f"‚úÖ #{order_id}-buyurtma qabul qilindi!\n\nüì¶ {product_name}\nüíµ {product_price}\nüíµ To'lov: yetkazib berishda naqd pul\n\nTasdiqlash uchun siz bilan bog'lanamiz!"
        
        await message.answer(text, reply_markup=get_main_menu(language))
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–∞–ª–∏—á–Ω–æ–º –∑–∞–∫–∞–∑–µ
        order_text = (
            f"üÜï –ù–ê–õ–ò–ß–ù–´–ô –ó–ê–ö–ê–ó #{order_id}\n\n"
            f"üë§ {name} (@{message.from_user.username or 'N/A'})\n"
            f"üìû {phone}\n"
            f"üìç {location}\n"
            f"üì¶ {product_name}\n"
            f"üíµ {product_price}\n"
            f"üí∞ –ù–∞–ª–∏—á–Ω—ã–µ\n"
            f"üïí {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        )
        await notify_admins(order_text)
    
    # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
    if not is_card and message.from_user.id in user_selections:
        del user_selections[message.from_user.id]

# –ü–†–ò–ï–ú –°–ö–†–ò–ù–®–û–¢–û–í –ß–ï–ö–û–í
@dp.message(F.photo)
async def handle_receipt_photo(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})
    
    if not session.get('waiting_receipt'):
        return
    
    user = get_user(user_id)
    if not user:
        return
    
    phone, name, language, location = user
    order_id = session['order_id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE orders SET status = 'waiting_confirm', receipt_photo_id = ? WHERE id = ?",
        (message.photo[-1].file_id, order_id)
    )
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    admin_text = (
        f"üì∏ –ü–û–°–¢–£–ü–ò–õ –ß–ï–ö\n\n"
        f"üÜî –ó–∞–∫–∞–∑: #{order_id}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {name} (@{message.from_user.username or 'N/A'})\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n\n"
        f"‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /confirm_{order_id}\n"
        f"‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel_{order_id}"
    )
    
    await notify_admins(admin_text)
    
    if language == 'ru':
        text = "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
    else:
        text = "‚úÖ Chek qabul qilindi! 15 daqiqa ichida tasdiqlanishini kuting."
    
    await message.answer(text, reply_markup=get_main_menu(language))
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    user_sessions[user_id]['waiting_receipt'] = False
    if 'order_id' in user_sessions[user_id]:
        del user_sessions[user_id]['order_id']
    if user_id in user_selections:
        del user_selections[user_id]

# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú–ò
@dp.message(F.text.startswith('/confirm_'))
async def confirm_order(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:  # üëà –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê
        return
    
    try:
        order_id = int(message.text.split('_')[1])
        update_order_status(order_id, 'confirmed', message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, product_name, product_price FROM orders WHERE id = ?", (order_id,))
        order = cursor.fetchone()
        conn.close()
        
        if order:
            user_id, product_name, product_price = order
            user = get_user(user_id)
            if user:
                phone, name, language, location = user
                if language == 'ru':
                    text = f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!"
                else:
                    text = f"‚úÖ #{order_id}-buyurtma tasdiqlandi! To'lov uchun rahmat!"
                
                await bot.send_message(user_id, text)
        
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@dp.message(F.text.startswith('/cancel_'))
async def cancel_order(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:  # üëà –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê
        return
    
    try:
        order_id = int(message.text.split('_')[1])
        update_order_status(order_id, 'cancelled')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        order = cursor.fetchone()
        conn.close()
        
        if order:
            user_id = order[0]
            user = get_user(user_id)
            if user:
                phone, name, language, location = user
                if language == 'ru':
                    text = f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω. –ß–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É."
                else:
                    text = f"‚ùå #{order_id}-buyurtma bekor qilindi. Chek tekshiruvdan o'tmadi."
                
                await bot.send_message(user_id, text)
        
        await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω!")
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")

# –ú–û–ò –ó–ê–ö–ê–ó–´
@dp.message(F.text.in_(["üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üì¶ Mening buyurtmalarim"]))
async def show_my_orders(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    phone, name, language, location = user
    orders = get_user_orders(message.from_user.id, language)
    
    if orders:
        if language == 'ru':
            response = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        else:
            response = "üì¶ Sizning buyurtmalaringiz:\n\n"
            
        for i, (product_name, product_price, status, payment, created_at) in enumerate(orders, 1):
            status_icon = "‚úÖ" if status == "confirmed" else "üîÑ" if status == "waiting_confirm" else "üÜï"
            payment_icon = "üí≥" if payment == "card_pending" else "üíµ"
            
            status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if status == "confirmed" else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if status == "waiting_confirm" else "–ù–æ–≤—ã–π"
            if language == 'uz':
                status_text = "Tasdiqlangan" if status == "confirmed" else "Tasdiqlanish kutilmoqda" if status == "waiting_confirm" else "Yangi"
            
            response += f"{i}. {product_name}\n"
            response += f"üíµ {product_price} {payment_icon}\n"
            response += f"{status_icon} {status_text}\n"
            response += f"üìÖ {created_at[:16]}\n\n"
    else:
        if language == 'ru':
            response = "üì¶ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
        else:
            response = "üì¶ Sizda hali buyurtmalar yo'q"
    
    await message.answer(response, reply_markup=get_main_menu(language))

# –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
@dp.message(F.text.in_(["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "‚Ü©Ô∏è Orqaga", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "‚Ü©Ô∏è Menyuga qaytish"]))
async def back_to_menu(message: types.Message):
    user = get_user(message.from_user.id)
    if user:
        language = user[2]
        if language == 'ru':
            text = "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
        else:
            text = "üìã Asosiy menyu:"
        await message.answer(text, reply_markup=get_main_menu(language))

# –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
@dp.message(Command("admin"))
async def admin_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:  # üëà –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê
        return
        
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'new'")
    new_orders = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'waiting_confirm'")
    waiting_confirm = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'confirmed'")
    confirmed_orders = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM products")
    total_products = cursor.fetchone()[0]
    
    conn.close()
    
    await message.answer(
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {new_orders}\n"
        f"üì∏ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {waiting_confirm}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {confirmed_orders}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üè∑Ô∏è –¢–æ–≤–∞—Ä–æ–≤: {total_products}\n\n"
        f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

@dp.message(Command("report"))
async def manual_report(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await send_monthly_report()

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    try:
        setup_database()
        asyncio.create_task(scheduled_reports())
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print(f"üëë –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        print(f"üí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {CARD_NUMBER}")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())